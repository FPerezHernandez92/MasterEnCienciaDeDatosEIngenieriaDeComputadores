###############################################################
###############################################################
###############################################################
######################### REGRESIÃ“N ###########################
###############################################################
###############################################################
######## BASEBALL
attach(baseball)
#Modelo lineal para Runs
fitRuns=lm(Salary~Runs)
fitRuns
#Modelo lineal para Hits
fitHits=lm(Salary~Hits)
fitHits
#Modelo lineal para Dobules
fitDoubles=lm(Salary~Doubles)
fitDoubles
#Modelo lineal para HomeRuns
fitHomeRuns=lm(Salary~HomeRuns)
fitHomeRuns
#Modelo lineal para Runs_batted_in
fitRunsBattedIn=lm(Salary~Runs_batted_in)
fitRunsBattedIn
mat_r_squ <- matrix(c(summary(fitRuns)$adj.r.squared,
summary(fitHits)$adj.r.squared,
summary(fitDoubles)$adj.r.squared,
summary(fitHomeRuns)$adj.r.squared,
summary(fitRunsBattedIn)$adj.r.squared))
rownames(mat_r_squ) <- c("fitRuns","fitHits","fitDoubles",
"fitHomeRuns","fitRunsBattedIn")
colnames(mat_r_squ) <- c("adj.r.squared")
mat_p_val <- matrix(c(summary(fitRuns)$coefficients["Runs","Pr(>|t|)"],
summary(fitHits)$coefficients["Hits","Pr(>|t|)"],
summary(fitDoubles)$coefficients["Doubles","Pr(>|t|)"],
summary(fitHomeRuns)$coefficients["HomeRuns","Pr(>|t|)"],
summary(fitRunsBattedIn)$coefficients["Runs_batted_in","Pr(>|t|)"]))
colnames(mat_p_val) <- c("p-value")
regresion_simple <- cbind(mat_r_squ,mat_p_val)
mat_rmse <- matrix(c(sqrt(sum(fitRuns$residuals^2)/(length(fitRuns$residuals)-2)),
sqrt(sum(fitHits$residuals^2)/(length(fitHits$residuals)-2)),
sqrt(sum(fitDoubles$residuals^2)/(length(fitDoubles$residuals)-2)),
sqrt(sum(fitHomeRuns$residuals^2)/(length(fitHomeRuns$residuals)-2)),
sqrt(sum(fitRunsBattedIn$residuals^2)/(length(fitRunsBattedIn$residuals)-2))))
colnames(mat_rmse) <- c("RMSE")
regresion_simple <- cbind(regresion_simple,mat_rmse)
regresion_simple
par(mfrow=c(3,2))
plot(Runs,Salary)
abline(fitRuns,col="red")
confint(fitRuns)
plot(Hits,Salary)
abline(fitHits,col="green")
confint(fitHits)
plot(Doubles,Salary)
abline(fitDoubles,col="blue")
confint(fitDoubles)
plot(HomeRuns,Salary)
abline(fitHomeRuns,col="orange")
confint(fitHomeRuns)
plot(Runs_batted_in,Salary)
abline(fitRunsBattedIn,col="brown")
confint(fitRunsBattedIn)
par(mfrow=c(1,1))
fitM1=lm(Salary~.,data=baseball)
fitM1
summary(fitM1)
fitM2=lm(Salary~Runs+Hits)
fitM2
summary(fitM2)
fitM3=lm(Salary~Runs+Doubles)
fitM3
summary(fitM3)
fitM4=lm(Salary~Runs+HomeRuns)
fitM4
summary(fitM4)
fitM5=lm(Salary~Runs+Runs_batted_in)
fitM5
summary(fitM5)
fitM2=lm(Salary~Runs+Hits+Doubles+HomeRuns+Runs_batted_in)
fitM2
summary(fitM2)
nombre <- "baseball/baseball"
run_lm_fold <- function(i, x, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(Y~.,x_tra)
yprime=predict(fitMulti,test)
sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
}
lmMSEtrain<-mean(sapply(1:5,run_lm_fold,nombre,"train"))
lmMSEtest<-mean(sapply(1:5,run_lm_fold,nombre,"test"))
modelo = Y~.
nombre <- "baseball/baseball"
run_lm_fold <- function(i, x, model, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(model,x_tra)
yprime=predict(fitMulti,test)
mse <- sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
resumen <- summary(fitMulti)
#Error estandar residual
a <- 100*(resumen$sigma/(mean(x_tra$Y)))
a <- format(a,digits=3)
#Coeficiente de determinacion R2
b <- resumen$r.squared
b <- format(b,digits=3)
#Coeficiente de determinacion R2 ajustado
c <- resumen$adj.r.squared
c <- format(c,digits=3)
return (list("EER" = a, "R2" = b, "R2_Adj" = c, "MSE" = mse))
}
modelo = Y~.
lmMSEtrain<-mean(sapply(1:5,run_lm_fold,modelo,nombre,"train"))
lmMSEtrain<-mean(sapply(1:5,run_lm_fold,nombre,modelo,"train"))
lmMSEtest<-mean(sapply(1:5,run_lm_fold,nombre,modelo,"test"))
nombre <- "baseball/baseball"
run_lm_fold <- function(i, x, model, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(Y~.,x_tra)
yprime=predict(fitMulti,test)
mse <- sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
resumen <- summary(fitMulti)
#Error estandar residual
a <- 100*(resumen$sigma/(mean(x_tra$Y)))
a <- format(a,digits=3)
#Coeficiente de determinacion R2
b <- resumen$r.squared
b <- format(b,digits=3)
#Coeficiente de determinacion R2 ajustado
c <- resumen$adj.r.squared
c <- format(c,digits=3)
return (list("EER" = a, "R2" = b, "R2_Adj" = c, "MSE" = mse))
}
lmMSEtrain<-mean(sapply(1:5,run_lm_fold,nombre,"train"))
lmMSEtest<-mean(sapply(1:5,run_lm_fold,nombre,"test"))
nombre <- "baseball/baseball"
run_lm_fold <- function(i, x, model, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(Y~.,x_tra)
yprime=predict(fitMulti,test)
mse <- sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
resumen <- summary(fitMulti)
#Error estandar residual
a <- 100*(resumen$sigma/(mean(x_tra$Y)))
a <- format(a,digits=3)
#Coeficiente de determinacion R2
b <- resumen$r.squared
b <- format(b,digits=3)
#Coeficiente de determinacion R2 ajustado
c <- resumen$adj.r.squared
c <- format(c,digits=3)
salida <- list("EER" = a, "R2" = b, "R2_Adj" = c, "MSE" = mse)
print(salida)
return (salida)
}
lmMSEtrain<-mean(sapply(1:5,run_lm_fold,nombre,"train"))
nombre <- "baseball/baseball"
run_lm_fold <- function(i, x, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(Y~.,x_tra)
yprime=predict(fitMulti,test)
mse <- sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
resumen <- summary(fitMulti)
#Error estandar residual
a <- 100*(resumen$sigma/(mean(x_tra$Y)))
a <- format(a,digits=3)
#Coeficiente de determinacion R2
b <- resumen$r.squared
b <- format(b,digits=3)
#Coeficiente de determinacion R2 ajustado
c <- resumen$adj.r.squared
c <- format(c,digits=3)
salida <- list("EER" = a, "R2" = b, "R2_Adj" = c, "MSE" = mse)
print(salida)
return (salida)
}
lmMSEtrain<-mean(sapply(1:5,run_lm_fold,nombre,"train"))
lmMSEtest<-mean(sapply(1:5,run_lm_fold,nombre,"test"))
lmMSEtrain<-(sapply(1:5,run_lm_fold,nombre,"train"))
nombre <- "baseball/baseball"
run_lm_fold <- function(i, x, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(Y~.,x_tra)
yprime=predict(fitMulti,test)
mse <- sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
resumen <- summary(fitMulti)
#Error estandar residual
a <- 100*(resumen$sigma/(mean(x_tra$Y)))
a <- format(a,digits=3)
#Coeficiente de determinacion R2
b <- resumen$r.squared
b <- format(b,digits=3)
#Coeficiente de determinacion R2 ajustado
c <- resumen$adj.r.squared
c <- format(c,digits=3)
salida <- list("EER" = a, "R2" = b, "R2_Adj" = c, "MSE" = mse)
return (salida)
}
lmMSEtrain<-(sapply(1:5,run_lm_fold,nombre,"train"))
lmMSEtest<-(sapply(1:5,run_lm_fold,nombre,"test"))
modelo <- Y~.
nombre <- "baseball/baseball"
run_lm_fold <- function(i, x,modelo, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(modelo,x_tra)
yprime=predict(fitMulti,test)
mse <- sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
resumen <- summary(fitMulti)
#Error estandar residual
a <- 100*(resumen$sigma/(mean(x_tra$Y)))
a <- format(a,digits=3)
#Coeficiente de determinacion R2
b <- resumen$r.squared
b <- format(b,digits=3)
#Coeficiente de determinacion R2 ajustado
c <- resumen$adj.r.squared
c <- format(c,digits=3)
salida <- list("EER" = a, "R2" = b, "R2_Adj" = c, "MSE" = mse)
return (salida)
}
modelo <- Y~.
lmMSEtrain<-(sapply(1:5,run_lm_fold,nombre,modelo,"train"))
lmMSEtest<-(sapply(1:5,run_lm_fold,nombre,modelo,"test"))
#Error Estandar Residual
a <- mean(as.numeric(lmMSEtest[1,]))
at <- ifelse(a<10,"Si","No")
a <- fotmat(a,digits=3)
a <- format(a,digits=3)
# Coeficiente de determinacion R2
b <- mean(as.numeric(fitMSEtest[2,]))
b <- mean(as.numeric(lmMSEtest[2,]))
bt <- ifelse(b>0.8,"Si", "No")
b <- format(b,digits = 3)
# Coeficiente de determinacion R2 ajustado
c <- mean(as.numeric(lmMSEtest[3,]))
ct <- ifelse(abs(b-c)<0.01,"Si","No")
b <- mean(as.numeric(lmMSEtest[2,]))
bt <- ifelse(b>0.8,"Si", "No")
# Coeficiente de determinacion R2 ajustado
c <- mean(as.numeric(lmMSEtest[3,]))
ct <- ifelse(abs(b-c)<0.01,"Si","No")
b <- format(b,digits = 3)
c <- format(c,digits = 3)
return (list ( "EER"     = a, "T1" = at,
"R2"      = b, "T2" = bt,
"R2_Adj"  = c, "T3" = ct,
"MSEtrain" = mean(as.numeric(lmMSEtrain[4,])),
"MSEtest" = mean(as.numeric(lmMSEtest[4,]))
))
salida <- list ( "EER"     = a, "T1" = at,
"R2"      = b, "T2" = bt,
"R2_Adj"  = c, "T3" = ct,
"MSEtrain" = mean(as.numeric(lmMSEtrain[4,])),
"MSEtest" = mean(as.numeric(lmMSEtest[4,]))
)
salida
a <- Analisis_lm_fold(modelo,nombre)
Analisis_lm_fold <- function(modelo, nombre){
lmMSEtrain<-(sapply(1:5,run_lm_fold,nombre,modelo,"train"))
lmMSEtest<-(sapply(1:5,run_lm_fold,nombre,modelo,"test"))
#Error Estandar Residual
a <- mean(as.numeric(lmMSEtest[1,]))
at <- ifelse(a<10,"Si","No")
a <- format(a,digits=3)
# Coeficiente de determinacion R2
b <- mean(as.numeric(lmMSEtest[2,]))
bt <- ifelse(b>0.8,"Si", "No")
# Coeficiente de determinacion R2 ajustado
c <- mean(as.numeric(lmMSEtest[3,]))
ct <- ifelse(abs(b-c)<0.01,"Si","No")
b <- format(b,digits = 3)
c <- format(c,digits = 3)
salida <- list ( "EER"     = a, "T1" = at,
"R2"      = b, "T2" = bt,
"R2_Adj"  = c, "T3" = ct,
"MSEtrain" = mean(as.numeric(lmMSEtrain[4,])),
"MSEtest" = mean(as.numeric(lmMSEtest[4,])))
return (salida)
}
modelo <- Y~.
a <- Analisis_lm_fold(modelo,nombre)
a
modelo1 <- Y~.
modelo2 <- Salary~Runs
b <- Analisis_lm_fold(modelo2,nombre)
warnings
warnings()
modelo2 <- Y~2
a <- Analisis_lm_fold(modelo,nombre)
b <- Analisis_lm_fold(modelo2,nombre)
baseball <- read.csv("baseball/baseball.dat", comment.char = "@", header = FALSE)
modelo2 <- Y~V2
a <- Analisis_lm_fold(modelo,nombre)
b <- Analisis_lm_fold(modelo2,nombre)
modelo2 <- Y~X2
a <- Analisis_lm_fold(modelo,nombre)
b <- Analisis_lm_fold(modelo2,nombre)
correlacion_baseball <- cor(baseball)
correlacion_baseball <- cor(baseball)[,17]
correlacion_baseball[cor(baseball)[,17] > 0.5 | cor(baseball)[,17] < -0.5]
modelo1 <- Y~X3
modelo2 <- Y~X4
modelo3 <- Y~X5
modelo4 <- Y~X7
modelo5 <- Y~X8
a <- Analisis_lm_fold(modelo1,nombre)
b <- Analisis_lm_fold(modelo2,nombre)
c <- Analisis_lm_fold(modelo3,nombre)
d <- Analisis_lm_fold(modelo4,nombre)
e <- Analisis_lm_fold(modelo5,nombre)
df <- data.frame(rbind(model1=a,model2=b,model3=c,model4=d,model5=e))
df
modelo1 <- Y~.
modelo2 <- Y~X4
modelo3 <- Y~X5
modelo4 <- Y~X7
modelo5 <- Y~X8
a <- Analisis_lm_fold(modelo1,nombre)
b <- Analisis_lm_fold(modelo2,nombre)
c <- Analisis_lm_fold(modelo3,nombre)
d <- Analisis_lm_fold(modelo4,nombre)
e <- Analisis_lm_fold(modelo5,nombre)
df <- data.frame(rbind(model1=a,model2=b,model3=c,model4=d,model5=e))
df
modelo1 <- Y~X3
modelo2 <- Y~X4
modelo3 <- Y~X5
modelo4 <- Y~X7
modelo5 <- Y~X8
a <- Analisis_lm_fold(modelo1,nombre)
b <- Analisis_lm_fold(modelo2,nombre)
c <- Analisis_lm_fold(modelo3,nombre)
d <- Analisis_lm_fold(modelo4,nombre)
e <- Analisis_lm_fold(modelo5,nombre)
df <- data.frame(rbind(model1=a,model2=b,model3=c,model4=d,model5=e))
df
modelo6 <- Y~.
df <- data.frame(rbind(model1=a,model2=b,model3=c,model4=d,model5=e,model6=f))
df
f <- Analisis_lm_fold(modelo6,nombre)
df <- data.frame(rbind(model1=a,model2=b,model3=c,model4=d,model5=e,model6=f))
df
run_lm_fold <- function(i, x,modelo, tt = "test") {
file <- paste(x, "-5-", i, "tra.dat", sep="")
x_tra <- read.csv(file, comment.char="@")
file <- paste(x, "-5-", i, "tst.dat", sep="")
x_tst <- read.csv(file, comment.char="@")
In <- length(names(x_tra)) - 1
names(x_tra)[1:In] <- paste ("X", 1:In, sep="")
names(x_tra)[In+1] <- "Y"
names(x_tst)[1:In] <- paste ("X", 1:In, sep="")
names(x_tst)[In+1] <- "Y"
if (tt == "train") {
test <- x_tra
}
else {
test <- x_tst
}
fitMulti=lm(modelo,x_tra)
yprime=predict(fitMulti,test)
mse <- sum(abs(test$Y-yprime)^2)/length(yprime) ##MSE
resumen <- summary(fitMulti)
#Error estandar residual
a <- 100*(resumen$sigma/(mean(x_tra$Y)))
a <- format(a,digits=3)
#Coeficiente de determinacion R2
b <- resumen$r.squared
b <- format(b,digits=3)
#Coeficiente de determinacion R2 ajustado
c <- resumen$adj.r.squared
c <- format(c,digits=3)
#RMSE
d <- sqrt(sum(fitMulti$residuals^2)/(length(fitMulti$residuals)-2))
d <- format(d,digits = 3)
salida <- list("EER" = a, "R2" = b, "R2_Adj" = c, "MSE" = mse, "RMSE" = d)
return (salida)
}
Analisis_lm_fold <- function(modelo, nombre){
lmMSEtrain<-(sapply(1:5,run_lm_fold,nombre,modelo,"train"))
lmMSEtest<-(sapply(1:5,run_lm_fold,nombre,modelo,"test"))
#Error Estandar Residual
a <- mean(as.numeric(lmMSEtest[1,]))
at <- ifelse(a<10,"Si","No")
a <- format(a,digits=3)
# Coeficiente de determinacion R2
b <- mean(as.numeric(lmMSEtest[2,]))
bt <- ifelse(b>0.8,"Si", "No")
# Coeficiente de determinacion R2 ajustado
c <- mean(as.numeric(lmMSEtest[3,]))
ct <- ifelse(abs(b-c)<0.01,"Si","No")
b <- format(b,digits = 3)
c <- format(c,digits = 3)
d <- mean(as.numeric(lmMSEtest[5,]))
salida <- list ( "EER"     = a, "T1" = at,
"R2"      = b, "T2" = bt,
"R2_Adj"  = c, "T3" = ct,
"MSEtrain" = mean(as.numeric(lmMSEtrain[4,])),
"MSEtest" = mean(as.numeric(lmMSEtest[4,])),
"RMSE" = d)
return (salida)
}
#Runs 3, Hits 4, Doubles 5, HomeRuns 7, Runs_batted_in 8
modelo1 <- Y~X3
modelo2 <- Y~X4
modelo3 <- Y~X5
modelo4 <- Y~X7
modelo5 <- Y~X8
modelo6 <- Y~.
a <- Analisis_lm_fold(modelo1,nombre)
b <- Analisis_lm_fold(modelo2,nombre)
c <- Analisis_lm_fold(modelo3,nombre)
d <- Analisis_lm_fold(modelo4,nombre)
e <- Analisis_lm_fold(modelo5,nombre)
f <- Analisis_lm_fold(modelo6,nombre)
df <- data.frame(rbind(model1=a,model2=b,model3=c,model4=d,model5=e,model6=f))
df
